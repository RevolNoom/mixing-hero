- Do not access child nodes at _init(), they are not instantiated yet. Access them at _ready()

- Do not multi-inherit a class with a Godot class and another. For example:
	class A: public Other, public GodotNode
  This will result in the dynamic library unusable
	(?) virtual function without default implementation will make the library unusable?

- The order in which you godot::register_class is important (!! CONFIRMED !!)
	You must register parent classes before child classes, or else
	register_property in _register_methods() won't expose parent variable 
	to its child class in the Godot editor.
	
	Also, it may jumbles up virtual functions?

- Don't forget that your code needs to be compiled to take effect. The Sconstruct only compile the *.cpp

- In register_method, if you pass an invalid(?) function pointer, it will not be known

- Some Script variables might not appear even though registered properly. You must restart Godot to see them.

- Variant can't cast to your custom class. So, functions like this won't work:
	class CustomClass: public GodotClass
	{
		GODOT_CLASS(CustomClass, GodotClass);

		void function(CustomClass c); <=== This fails
	}
	
	void function(CustomClass c) is implicitly converted from void function(Variant c). 
Variant does not know how to cast to CustomClass, but it knows how to cast to a pointer of CustomClass, so this works:
	
	void function(CustomClass *c);


- Be sure that you write your function name correctly. 
	static void _register_method();
	static void _register_methods();
	
	One missing 's' and the library won't register a thing

- If you don't godot::register_class<A>(), then A::_new() is nullptr. Don't forget that!

(?) This next one needs testing
- If you don't declare any constructor/destructor, you'll be supplied with default ones. With default ones, everything is sets to default value (0 for int, 0.0 for double, something like that)
	But! If you define a default constructor that do nothing (e.g. A(){}) then beware, the member variables might be set to junk. 
	When created, the engine will call the constructor first. And then it calls _init(). So, any modification in your constructor will be lost.
	In the register_property function, the default value does two thing depends on how you edit it in the editor:
	+ If you leave the field intact in the editor, then _init() will have the final say in what value that field will have when the object is created. (A(){} => _init())
	+ If you modify the field in the editor, then objects will be created with the value of the field. (A(){} => _init() => value of field)
	
	Thus, register_method() argument named "default" should be coded with default-constructed value, NOT the default value you want it to be. 
